package rs.etf.sab.student;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import org.junit.Assert;

import rs.etf.sab.operations.*;
import rs.etf.sab.tests.TestHandler;
import rs.etf.sab.tests.TestRunner;


public class StudentMain {

	static class Pair {
		Integer x;
		Integer y;

		public Pair(Integer a, Integer b) {
			x = a;
			y = b;
		}

	}

	static AddressOperations addressOperations;
	static CityOperations cityOperations;
	static CourierOperations courierOperations;
	static CourierRequestOperation courierRequestOperation;
	static DriveOperation driveOperation;
	static GeneralOperations generalOperations;
	static PackageOperations packageOperations;
	static StockroomOperations stockroomOperations;
	static UserOperations userOperations;
	static VehicleOperations vehicleOperations;

	static Map<Integer, Pair> addressesCoords = new HashMap<>();
	static Map<Integer, BigDecimal> packagePrice = new HashMap<>();

	public static void main(String[] args) {

		Connection conn = Connector.connect();

		if (conn == null) {
			System.out.println("Connection failed.");
			return;
		}

		addressOperations = new AddressOperationsImpl(conn); // Change this to your implementation.
		cityOperations = new CityOperationsImpl(conn); // Do it for all classes.
		courierOperations = new CourierOperationsImpl(conn); // e.g. = new MyDistrictOperations();
		courierRequestOperation = new CourierRequestOperationsImpl(conn);
		driveOperation = new DriveOperationsImpl(conn);
		generalOperations = new GeneralOperationsImpl(conn);
		packageOperations = new PackageOperationsImpl(conn);
		stockroomOperations = new StockroomOperationsImpl(conn);
		userOperations = new UserOperationsImpl(conn);
		vehicleOperations = new VehicleOperationsImpl(conn);

		generalOperations.eraseAll();

		TestHandler.createInstance(addressOperations, cityOperations, courierOperations, courierRequestOperation,
				driveOperation, generalOperations, packageOperations, stockroomOperations, userOperations,
				vehicleOperations);

		TestRunner.runTests();
	
		
	}

	static int insertCity(final String name, final String postalCode) {
		final int idCity = cityOperations.insertCity(name, postalCode);
		Assert.assertNotEquals(-1L, (long) idCity);
		Assert.assertTrue(cityOperations.getAllCities().contains(idCity));
		return idCity;
	}

	static int insertAddress(final String street, final int number, final int idCity, final int x, final int y) {
		final int idAddress = addressOperations.insertAddress(street, number, idCity, x, y);
		Assert.assertNotEquals(-1L, (long) idAddress);
		Assert.assertTrue(addressOperations.getAllAddresses().contains(idAddress));
		addressesCoords.put(idAddress, new Pair(x, y));
		return idAddress;
	}

	static String insertUser(final String username, final String firstName, final String lastName,
			final String password, final int idAddress) {
		Assert.assertTrue(userOperations.insertUser(username, firstName, lastName, password, idAddress));
		Assert.assertTrue(userOperations.getAllUsers().contains(username));
		return username;
	}

	static String insertCourier(final String username, final String firstName, final String lastName,
			final String password, final int idAddress, final String driverLicenceNumber) {
		insertUser(username, firstName, lastName, password, idAddress);
		Assert.assertTrue(courierOperations.insertCourier(username, driverLicenceNumber));
		return username;
	}

	static public void insertAndParkVehicle(final String licencePlateNumber, final BigDecimal fuelConsumption,
			final BigDecimal capacity, final int fuelType, final int idStockroom) {
		Assert.assertTrue(vehicleOperations.insertVehicle(licencePlateNumber, fuelType, fuelConsumption, capacity));
		Assert.assertTrue(vehicleOperations.getAllVehichles().contains(licencePlateNumber));
		Assert.assertTrue(vehicleOperations.parkVehicle(licencePlateNumber, idStockroom));
	}

	static public int insertStockroom(final int idAddress) {
		final int stockroomId = stockroomOperations.insertStockroom(idAddress);
		Assert.assertNotEquals(-1L, (long) stockroomId);
		Assert.assertTrue(stockroomOperations.getAllStockrooms().contains(stockroomId));
		return stockroomId;
	}

	static int insertAndAcceptPackage(final int addressFrom, final int addressTo, final String userName,
			final int packageType, final BigDecimal weight) {
		final int idPackage = packageOperations.insertPackage(addressFrom, addressTo, userName, packageType, weight);
		Assert.assertNotEquals(-1L, (long) idPackage);
		Assert.assertTrue(packageOperations.acceptAnOffer(idPackage));
		Assert.assertTrue(packageOperations.getAllPackages().contains(idPackage));
		Assert.assertEquals(1L, (long) packageOperations.getDeliveryStatus(idPackage));
		final BigDecimal price = Util.getPackagePrice(packageType, weight,
				Util.getDistance(new Pair[] { addressesCoords.get(addressFrom), addressesCoords.get(addressTo) }));
		Assert.assertTrue(
				packageOperations.getPriceOfDelivery(idPackage).compareTo(price.multiply(new BigDecimal(1.05))) < 0);
		Assert.assertTrue(
				packageOperations.getPriceOfDelivery(idPackage).compareTo(price.multiply(new BigDecimal(0.95))) > 0);
		packagePrice.put(idPackage, price);
		return idPackage;
	}

	static public class Util {
		static double euclidean(final int x1, final int y1, final int x2, final int y2) {
			return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
		}

		static BigDecimal getPackagePrice(final int type, final BigDecimal weight, final double distance) {
			switch (type) {
			case 0: {
				return new BigDecimal(115.0 * distance);
			}
			case 1: {
				return new BigDecimal((175.0 + weight.doubleValue() * 100.0) * distance);
			}
			case 2: {
				return new BigDecimal((250.0 + weight.doubleValue() * 100.0) * distance);
			}
			case 3: {
				return new BigDecimal((350.0 + weight.doubleValue() * 500.0) * distance);
			}
			default: {
				return null;
			}
			}
		}

		static double getDistance(final Pair... addresses) {
			double distance = 0.0;
			for (int i = 1; i < addresses.length; ++i) {
				if(addresses[i-1].x == null ||addresses[i].x ==null||addresses[i-1].y == null ||addresses[i].y ==null)
					System.out.println("BAD");
					
				distance += euclidean((int) addresses[i - 1].x, (int) addresses[i - 1].y, (int) addresses[i].x,
						(int) addresses[i].y);
			}
			return distance;
		}
	}
}
